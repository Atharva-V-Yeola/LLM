# -*- coding: utf-8 -*-
"""LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMEXqsX_UZrmXEbzfPgLT_P_ncAYmLmy
"""

!pip install langchain

!pip install langchain langchain-community together

from langchain.llms import Together
import os

# Set your Together.ai API key
os.environ["TOGETHER_API_KEY"] = "1e9e26206fdb47decad40809a9920af410b493e61acc6d81c04ea601e76289df"  # Replace with your key

# Initialize LLaMA 3 LLM from Meta via Together
llm = Together(
    model="meta-llama/Llama-3-8b-chat-hf",  # You can also try Llama-2
    temperature=0.6,
    max_tokens=200
)

# Ask the LLM a question
response = llm("Suggest a fancy and unique name for an Indian restaurant.")
print(response)

from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
import os
os.environ["TOGETHER_API_KEY"] = "1e9e26206fdb47decad40809a9920af410b493e61acc6d81c04ea601e76289df"

# Set up the LLM with temperature
llm = Together(
    model="meta-llama/Llama-3-8b-chat-hf",  # This line is necessary because it tells LangChain which specific LLM (language model) to use from Together.ai's model hub.
    temperature=0.6
)


# Chain 1: Get a fancy name for a restaurant based on the dish
pt_name = PromptTemplate(
    input_variables=["dish"],
    template="I want to open a restaurant focused on {dish} cuisine. Suggest a fancy and creative name for it."
)
chain_name = LLMChain(llm=llm, prompt=pt_name,output_key = "Food_Hub_name")

# Prompt for menu items
pt_items = PromptTemplate(
    input_variables=["Food_Hub_name"],
    template="Suggest some creative and appealing menu items for a restaurant called {Food_Hub_name}. Return them as a comma-separated list. Just give me 5 to 7 names"
)
food_items_chain = LLMChain(llm=llm, prompt=pt_items,output_key="menu_items")

"""# New Section"""

from langchain.chains import SimpleSequentialChain
chain = SimpleSequentialChain(chains=[chain_name, food_items_chain])
response = chain.run("Indian")
print(response)

!pip install wikipedia

from langchain.llms import Together
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.tools import WikipediaQueryRun
from langchain.utilities import WikipediaAPIWrapper
import os
#from secret_key import together_api_key

# Set API key
os.environ["TOGETHER_API_KEY"] = "1e9e26206fdb47decad40809a9920af410b493e61acc6d81c04ea601e76289df"  # Replace with your key


# Load LLaMA from Together
llm = Together(
    model="meta-llama/Llama-3-8b-chat-hf",
    temperature=0.7
)

# Get content from Wikipedia
wiki_tool = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())
wiki_data = wiki_tool.run("Dr. APJ Abdul Kalam")

# Use LLaMA to answer question
prompt = PromptTemplate(
    input_variables=["wiki_content"],
    template="""
Based on the following Wikipedia info, answer:
"When was Dr. APJ Abdul Kalam born and what was his hobby?"

Wikipedia content:
{wiki_content}
"""
)

chain = LLMChain(llm=llm, prompt=prompt)
response = chain.run({"wiki_content": wiki_data})

print(response)

os.environ['SERPAPI_API_KEY'] = "c5cbe31cd2a553c25e8d692b1a67e29a02e39621bb9344916fb4309edfd74492"

# Step 1: Remove any bad or broken serpapi versions
!pip uninstall -y serpapi

# Step 2: Reinstall clean, official SerpAPI package
!pip install serpapi --upgrade --quiet
!pip install --upgrade pip --quiet

import requests

SERPAPI_API_KEY = "c5cbe31cd2a553c25e8d692b1a67e29a02e39621bb9344916fb4309edfd74492"
query = "Best veg Food in India. One dish per state/union teritory. Give the list state wise not in single line but in table form which consist of 2 column one name of state and second one dish."

params = {
    "engine": "google",
    "q": query,
    "api_key": SERPAPI_API_KEY
}

response = requests.get("https://serpapi.com/search", params=params)
data = response.json()

# Extract snippet
if "organic_results" in data:
    print(data["organic_results"][0].get("snippet", "No snippet found"))
else:
    print("No results found")

import requests

query = "Vegetarian food of each Indian state and union territory"

params = {
    "engine": "google",
    "q": query,
    "api_key": SERPAPI_API_KEY
}

response = requests.get("https://serpapi.com/search", params=params)
data = response.json()

# Collect snippets from top 3 results
snippets = []
for result in data.get("organic_results", [])[:3]:
    snippet = result.get("snippet")
    if snippet:
        snippets.append(snippet)

search_context = " ".join(snippets)
print(search_context)

name = chain.run("North Indian")
print(name)

type(chain.memory)

from langchain.memory import ConversationBufferMemory
memory = ConversationBufferMemory(memory_key="chat_history")
chain = SimpleSequentialChain(chains=[chain_name, food_items_chain], memory=memory)
response = chain.run("North Indian")
print(response)

from langchain.chains import SequentialChain
from langchain.memory import ConversationBufferMemory

# Setup memory
memory = ConversationBufferMemory(memory_key="chat_history",
                                  return_messages=True,
                                  output_key="menu_items"
                                  )

# Create the final chain
chain = SequentialChain(
    chains=[chain_name, food_items_chain],
    input_variables=["dish"],
    output_variables=["Food_Hub_name", "menu_items"],
    memory=memory,
    verbose=True
)

# Run the chain
response = chain.invoke({"dish": "North Indian"})
print(response)

print(chain.memory.buffer)